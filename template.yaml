AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "ETL Training - Athena"

Parameters:
    S3Name:
        Type: 'String'
        Default: 'minfante-etl-training'
    Schema:
        Type: 'String'
        Default: "{\"Date\":{\"type\": \"datetime\", \"format\": \"%m/%d/%Y\" },\"Description\":{\"type\": \"string\"},\"Deposits\":{\"type\": \"float\"},\"Withdrawls\":{\"type\": \"float\"}    ,\"Balance\":{\"type\": \"float\"}}"

Globals:
    Function:
        Timeout: 30
        Runtime: python3.8
        Environment:
            Variables:
                DATA_PREFIX: "data"
                DATA_FILE_NAME: "raw_data.csv"
                PROCESSING_PREFIX: "processing"

Resources:
################# Lamba Layers ###################
    CommonsLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: common-layer
            Description: "Common modules"
            RetentionPolicy: Delete
            CompatibleRuntimes:
                - python3.8
            ContentUri: ./lambda-layer/
################# S3 BUCKET ######################
    S3Bucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Delete 
        Properties:
            BucketName: !Ref S3Name

    FillBucketLambda:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub '${AWS::StackName}-fill-bucket-lambda'
            CodeUri: lambda/fill_bucket_lambda/
            Handler: fill_bucket_lambda.lambda_handler
            Layers:
                - !Ref CommonsLayer
            Policies:
                - Version: '2012-10-17'
                  Statement:
                      - Effect: Allow
                        Action:
                            - 's3:*'
                        Resource: !Sub "arn:aws:s3:::${S3Name}*"
                - Version: '2012-10-17'
                  Statement:
                      - Effect: Allow
                        Action:
                            - 'cloudwatch:*'
                            - 'logs:*'
                        Resource: '*'
            Environment:
                Variables:
                    BUCKET_NAME: !Ref S3Bucket
                    BUCKET_ARN: !GetAtt S3Bucket.Arn
################ Step Function ####################
    EtlPipeline:
        Type: AWS::Serverless::StateMachine
        Properties:
            Name: !Sub '${AWS::StackName}-etl-pipeline'
            DefinitionUri: step-function/etl-pipeline.json
            DefinitionSubstitutions:
                ValidateCsvFileLambdaArn: !GetAtt ValidateCsvFileLambda.Arn
                RawCrawlerName: !Ref RawFileCrawler
            Role: !GetAtt EtlPipelineRole.Arn
    EtlPipelineRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - !Sub states.${AWS::Region}.amazonaws.com
                      Action:
                          - 'sts:AssumeRole'
            Policies:
                - PolicyName: !Sub '${AWS::StackName}-etl-pipeline-policy'
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                        - Effect: Allow
                          Action:
                              - lambda:InvokeFunction
                          Resource: !GetAtt ValidateCsvFileLambda.Arn
                        - Effect: Allow
                          Action:
                              - glue:*
                          Resource:
                              - "*"
                        - Effect: Allow
                          Action:
                              - logs:GetLogEvents
                              - logs:PutLogEvents
                              - logs:CreateLogStream
                              - logs:DescribeLogStreams
                              - logs:PutRetentionPolicy
                              - logs:CreateLogGroup
                          Resource: "*"
    TriggerPipelineLambda:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub '${AWS::StackName}-trigger-pipeline'
            CodeUri: lambda/trigger_pipeline_lambda/
            Handler: trigger_pipeline_lambda.lambda_handler
            Environment:
                Variables:
                    STATE_MACHINE_ARN: !GetAtt EtlPipeline.Arn
            Layers:
                - !Ref CommonsLayer
            Policies:
                - Version: '2012-10-17'
                  Statement:
                      - Effect: Allow
                        Action:
                            - 's3:*'
                        Resource: !Sub "arn:aws:s3:::${S3Name}*"
                      - Effect: Allow
                        Action:
                            - 'states:StartExecution'
                        Resource: !GetAtt EtlPipeline.Arn
                      - Effect: Allow
                        Action:
                            - 'cloudwatch:*'
                            - 'logs:*'
                        Resource: '*'
            Events:
                ObjectCreatedEvent:
                    Type: S3
                    Properties:
                        Bucket: !Ref S3Bucket
                        Events: s3:ObjectCreated:*
                        Filter:
                            S3Key:
                                Rules:
                                    - Name: prefix
                                      Value: "data"
################ Functions ####################
    ValidateCsvFileLambda:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub '${AWS::StackName}-validate-csv-file'
            CodeUri: lambda/validate_csv_file_lambda
            Handler: validate_csv_file_lambda.lambda_handler
            Environment:
                Variables:
                    SCHEMA: !Ref Schema
            Layers:
                - !Ref CommonsLayer
            Policies:
                - Version: '2012-10-17'
                  Statement:
                      - Effect: Allow
                        Action:
                            - 's3:*'
                        Resource: !Sub "arn:aws:s3:::${S3Name}*"
                      - Effect: Allow
                        Action:
                            - 'cloudwatch:*'
                            - 'logs:*'
                        Resource: '*'
################ Glue ####################
    GlueDb:
        Type: AWS::Glue::Database
        Properties:
            CatalogId: !Ref AWS::AccountId
            DatabaseInput:
                Description: !Sub "Glue Database of stack ${AWS::StackName}"
    RawFileCrawler:
        Type: "AWS::Glue::Crawler"
        Properties:
            Role: !Ref GlueRole
            Description: "Crawler to generate the schema of the raw file"
            SchemaChangePolicy:
                UpdateBehavior: "UPDATE_IN_DATABASE"
                DeleteBehavior: "DELETE_FROM_DATABASE"
            DatabaseName: !Ref GlueDb
            Targets:
                S3Targets:
                    - Path: !Sub "s3://${S3Name}/processing"
            Configuration: "{\"Version\":1.0,\"Grouping\":{\"TableGroupingPolicy\":\"CombineCompatibleSchemas\"}}"
    GlueRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service:
                                - "glue.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Policies:
                -
                    PolicyName: "root"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Sid: "s3access"
                                Effect: "Allow"
                                Action:
                                    - "s3:*"
                                Resource: !Sub "arn:aws:s3:::${S3Name}*"
                            -
                                Sid: "glue"
                                Effect: "Allow"
                                Action: "glue:*"
                                Resource: !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:*"
                            -
                                Sid: "cwlog"
                                Effect: "Allow"
                                Action: "logs:*"
                                Resource:
                                    - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/*"
