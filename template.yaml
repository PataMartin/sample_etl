AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "ETL Training - Athena"

Parameters:
    S3Name:
        Type: 'String'
        Default: 'minfante-etl-training'

Globals:
    Function:
        Timeout: 30
        Runtime: python3.8
        Environment:
            Variables:
                DATA_PREFIX: "data"
                DATA_FILE_NAME: "raw_data.csv"

Resources:
################# Lamba Layers ###################
    CommonsLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: common-layer
            Description: "Common modules"
            RetentionPolicy: Delete
            CompatibleRuntimes:
                - python3.8
            ContentUri: ./lambda-layer/
################# S3 BUCKET ######################
    S3Bucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Delete 
        Properties:
            BucketName: !Ref S3Name

    FillBucketLambda:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub '${AWS::StackName}-fill-bucket-lambda'
            CodeUri: lambda/fill_bucket_lambda/
            Handler: fill_bucket_lambda.lambda_handler
            Layers:
                - !Ref CommonsLayer
            Policies:
                - Version: '2012-10-17'
                  Statement:
                      - Effect: Allow
                        Action:
                            - 's3:*'
                        Resource: !Sub "arn:aws:s3:::${S3Name}*"
                - Version: '2012-10-17'
                  Statement:
                      - Effect: Allow
                        Action:
                            - 'cloudwatch:*'
                            - 'logs:*'
                        Resource: '*'
            Environment:
                Variables:
                    BUCKET_NAME: !Ref S3Bucket
                    BUCKET_ARN: !GetAtt S3Bucket.Arn
################ Step Function ####################
    EtlPipeline:
        Type: AWS::Serverless::StateMachine
        Properties:
            Name: !Sub '${AWS::StackName}-etl-pipeline'
            DefinitionUri: step-function/etl-pipeline.json
            DefinitionSubstitutions:
            Policies:
    TriggerPipelineLambda:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub '${AWS::StackName}-trigger-pipeline'
            CodeUri: lambda/trigger_pipeline_lambda/
            Handler: trigger_pipeline_lambda.lambda_handler
            Layers:
                - !Ref CommonsLayer
            Policies:
                - Version: '2012-10-17'
                  Statement:
                      - Effect: Allow
                        Actions:
                            - 's3:*'
                        Resource: "arn:aws:s3:::${S3Name}*"
                - Version: '2012-10-17'
                  Statement:
                      - Effect: Allow
                        Actions:
                            - "states:StartExecution"
                        Resource: !GetAtt EtlPipeline.Arn
                - Version: '2012-10-17'
                  Statement:
                      - Effect: Allow
                        Action:
                            - 'cloudwatch:*'
                            - 'logs:*'
                        Resource: '*'
            Events:
                ObjectCreatedEvent:
                    Type: S3
                    Events: s3:ObjectCreated:*
                    Filter:
                        S3Key:
                            Rules:
                                - Name: prefix
                                  Value: "data"
                    Properties:
                        Bucket: !Ref S3Bucket
